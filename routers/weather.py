from aiogram import Bot, Router
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from filters import Text
from logger import add_log
from weather_data.data_shape import update_user, get_user_data, get_data, search_city


router = Router()


class User(StatesGroup):
    city = State()


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
async def send_news(user_id, bot: Bot) -> None:
    data = get_data(user_id)
    
    forecasts_text = ''
    if data['forecasts']:
        for i in data['forecasts']:
            forecasts_text += f"{i['date']}: ‚òÄ{i['day']}¬∞C - üåí {i['night']}¬∞C\n\n\n"

    text = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ <b>{data['city']}</b>: <b>{data['temp_fact']}¬∞C</b>, –æ—â—É—â–∞–µ—Ç—Å—è <b>{data['feels_like']}¬∞C</b>\n" \
           f"{data['condition_fact']}\n\n" \
           f"{forecasts_text}" \
           f"–î–æ–ª–ª–∞—Ä: <b>{data['usd']}</b>{data['usd_changes']}\n–ï–≤—Ä–æ: <b>{data['eur']}</b>{data['eur_changes']}\n\n" \
           f"–í—Ä–µ–º—è: <b>{data['time']}</b> <i>{data['date']}</i>\n\n" \
           f"–î–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /setcity"
    photo = FSInputFile(f"weather_data/images/{data['photo']}.jpg")

    await bot.send_photo(user_id, photo=photo, caption=text, parse_mode='HTML')


@router.message(Command('weather'))
@router.message(Text('–≤–∞—Å—è –ø–æ–≥–æ–¥–∞'))
async def send_weather(message: Message, bot: Bot) -> None:
    add_log('send_weather', message)

    db_user = get_user_data(message.from_user.id)
    if db_user:
        await send_news(message.from_user.id, bot)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –≥–æ—Ä–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity')


@router.message(Command('setcity'))
async def send_setcity(message: Message, state: FSMContext) -> None:
    add_log('send_setcity', message)

    await state.set_state(User.city)
    db_user = get_user_data(message.from_user.id)

    if db_user:
        text = f"–í–∞—à –≥–æ—Ä–æ–¥: <b>{db_user['city']}</b>\n" \
               f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{db_user['timezone']}</b>\n\n" \
               f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:"
    else:
        text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"

    await message.answer(
        text,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='HTML'
    )


@router.message(User.city)
async def city_chosen(message: Message, state: FSMContext) -> None:
    await state.update_data(city=message.text)
    data = await state.get_data()
    await state.clear()

    obj = search_city(data['city'])
    if obj:
        if obj['region'] is None:
            region = ''
        else:
            region = ', ' + obj['region']

        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{obj['city']}{region}</b>\n\n" \
               f"<i>–î–ª—è —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ</i> /setcity"

        update_user(
            tg_id=message.from_user.id,
            city=obj['city'],
            timezone=obj['timezone'],
            lat=obj['lat'],
            lon=obj['lon']
        )
        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer(f"–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /setcity –∏–ª–∏ /start")
